<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://Mr-L-R-Y.github.io</id>
    <title>404莣孒嬡</title>
    <updated>2021-05-14T12:52:21.442Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://Mr-L-R-Y.github.io"/>
    <link rel="self" href="https://Mr-L-R-Y.github.io/atom.xml"/>
    <subtitle>阿巴阿巴阿巴。。。。。。</subtitle>
    <logo>https://Mr-L-R-Y.github.io/images/avatar.png</logo>
    <icon>https://Mr-L-R-Y.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, 404莣孒嬡</rights>
    <entry>
        <title type="html"><![CDATA[虚函数]]></title>
        <id>https://Mr-L-R-Y.github.io/post/xu-han-shu/</id>
        <link href="https://Mr-L-R-Y.github.io/post/xu-han-shu/">
        </link>
        <updated>2021-05-13T13:48:19.000Z</updated>
        <summary type="html"><![CDATA[<p><em>虚函数的概念</em>：</p>
<ol>
<li>函数在某基类中声明为virtual；</li>
<li>在一个或多个派生类中被重新定义的成员函数<pre><code class="language-c++">#include&quot;iostream&quot;
#include&quot;cmath&quot;
using namespace std;
const double PI=3.1415926;
class Shape{
 protected:
     double len,wid;
 public:
     Shape(double len,double wid){
         this-&gt;len=len;
         this-&gt;wid=wid;
     }
     //此时，Area在基类中被声明为virtual，为虚函数
   virtual double Area(){
         return wid*len;
     }
};
class Circle:public Shape{
    protected:
    double r;
    public:
    Shape(double len,double wid,double r):Shape(wid,len){
         this-&gt;r=r;
    }
     double Area(){
         return PI*pow(r,2);
     }
};


</code></pre>
</li>
</ol>
<p><em>虚函数使用格式</em>：<br>
virtual 函数返回类型 函数名(参数表){<br>
函数体<br>
}；</p>
<p><em>Ps:</em>:<br>
<strong>实现多态性的方法</strong>：<br>
通过指向派生类的基类指针或引用，访问派生类中同名覆盖成员函数。</p>
<p><em>虚函数的实现</em>：</p>
<pre><code class="language-c++">class Shape{
    protected:
    double wid,len;
    public:
    Shape(double len,double wid){
        this-&gt;len=len;
        this-&gt;wid=wid;
    }
    virtule double Area(){
        return len*wid;
    }
};
</code></pre>
<p>此时，Shape类中的Area函数被定义为虚函数，故编译器会会在类Shape中插入一段不显示的数据，并创建一个表，那段不显示的数据被称为 <strong>vptr指针</strong>，指向那个表，那个表叫做 <strong>vtbl</strong>,vtbl会保存自己类中的虚函数地址！</p>
<p><em>示例一</em></p>
<pre><code class="language-c++">#include &quot;iostream&quot;
#include&quot;cmath&quot;
using namespace std;
const double PI=3.1415926;
class Point{
protected:
    double len,wid;
public:
    Point(double len,double wid){
        this-&gt;len=len;
        this-&gt;wid=wid;
    }
     double Area(){
        return 0.0;
    }
};
class Circle:public Point{
protected:
    double r;
public:
    Circle(double len,double wid,double r): Point(len,wid){
        this-&gt;r=r;
    }
    double Area(){
        return PI*pow(r,2);
    }
};
int main(){
    Point a(10,10);                            //创建Point类对象
    cout&lt;&lt;&quot;The Point Area is &quot;&lt;&lt;a.Area()&lt;&lt;endl;        //调用Area函数输出面积
    Circle c(10,10,10);                      //创建Circle类对象
    cout&lt;&lt;&quot;The Circle Area is &quot;&lt;&lt;c.Area()&lt;&lt;endl;      //调用派生类Area函数输出面积
    Point a2 = c;                                     //使用派生类对象初始化基类对象
    cout&lt;&lt;&quot;The a2 Area is &quot;&lt;&lt;a2.Area()&lt;&lt;endl;         //调用a2中Area函数
    Point *pt=&amp;c;                                     //创建指向派生类的基类指针
    cout&lt;&lt;&quot;The *pt Area is &quot;&lt;&lt;pt-&gt;Area()&lt;&lt;endl;       //调用指针中的Area函数
    Point &amp;a3=c;                                      //使用派生类初始化基类引用
    cout&lt;&lt;&quot;The a3 Area is &quot;&lt;&lt;a3.Area()&lt;&lt;endl;         //引用中的Area函数
    return 0;
}
</code></pre>
<p>此时，基类中的Area函数为成员函数，根据赋值兼容规则，仅对象C返回值。其余对象皆调用基类Area函数</p>
<p><img src="https://Mr-L-R-Y.github.io/post-images/1620916285008.png" alt="" loading="lazy"><br>
<em>实例2</em>：</p>
<pre><code class="language-c++">#include &quot;iostream&quot;
#include&quot;cmath&quot;
using namespace std;
const double PI=3.1415926;
class Point{
protected:
    double len,wid;
public:
    Point(double len,double wid){
        this-&gt;len=len;
        this-&gt;wid=wid;
    }
    virtual double Area(){
        return 0.0;
    }
};
class Circle:public Point{
protected:
    double r;
public:
    Circle(double len,double wid,double r): Point(len,wid){
        this-&gt;r=r;
    }
    double Area(){
        return PI*pow(r,2);
    }
};
int main(){
    Point a(10,10);                            //创建Point类对象
    cout&lt;&lt;&quot;The Point Area is &quot;&lt;&lt;a.Area()&lt;&lt;endl;        //调用Area函数输出面积
    Circle c(10,10,10);                      //创建Circle类对象
    cout&lt;&lt;&quot;The Circle Area is &quot;&lt;&lt;c.Area()&lt;&lt;endl;      //调用派生类Area函数输出面积
    Point a2 = c;                                     //使用派生类对象初始化基类对象
    cout&lt;&lt;&quot;The a2 Area is &quot;&lt;&lt;a2.Area()&lt;&lt;endl;         //调用a2中Area函数
    Point *pt=&amp;c;                                     //创建指向派生类的基类指针
    cout&lt;&lt;&quot;The *pt Area is &quot;&lt;&lt;pt-&gt;Area()&lt;&lt;endl;       //调用指针中的Area函数
    Point &amp;a3=c;                                      //使用派生类初始化基类引用
    cout&lt;&lt;&quot;The a3 Area is &quot;&lt;&lt;a3.Area()&lt;&lt;endl;         //引用中的Area函数
    return 0;
}
</code></pre>
<p>此时，基类中Area被声明为虚函数，此时输出结果中指针与引用皆调用派生类中的Area函数。</p>
<figure data-type="image" tabindex="1"><img src="https://Mr-L-R-Y.github.io/post-images/1620916294638.png" alt="" loading="lazy"></figure>
]]></summary>
        <content type="html"><![CDATA[<p><em>虚函数的概念</em>：</p>
<ol>
<li>函数在某基类中声明为virtual；</li>
<li>在一个或多个派生类中被重新定义的成员函数<pre><code class="language-c++">#include&quot;iostream&quot;
#include&quot;cmath&quot;
using namespace std;
const double PI=3.1415926;
class Shape{
 protected:
     double len,wid;
 public:
     Shape(double len,double wid){
         this-&gt;len=len;
         this-&gt;wid=wid;
     }
     //此时，Area在基类中被声明为virtual，为虚函数
   virtual double Area(){
         return wid*len;
     }
};
class Circle:public Shape{
    protected:
    double r;
    public:
    Shape(double len,double wid,double r):Shape(wid,len){
         this-&gt;r=r;
    }
     double Area(){
         return PI*pow(r,2);
     }
};


</code></pre>
</li>
</ol>
<p><em>虚函数使用格式</em>：<br>
virtual 函数返回类型 函数名(参数表){<br>
函数体<br>
}；</p>
<p><em>Ps:</em>:<br>
<strong>实现多态性的方法</strong>：<br>
通过指向派生类的基类指针或引用，访问派生类中同名覆盖成员函数。</p>
<p><em>虚函数的实现</em>：</p>
<pre><code class="language-c++">class Shape{
    protected:
    double wid,len;
    public:
    Shape(double len,double wid){
        this-&gt;len=len;
        this-&gt;wid=wid;
    }
    virtule double Area(){
        return len*wid;
    }
};
</code></pre>
<p>此时，Shape类中的Area函数被定义为虚函数，故编译器会会在类Shape中插入一段不显示的数据，并创建一个表，那段不显示的数据被称为 <strong>vptr指针</strong>，指向那个表，那个表叫做 <strong>vtbl</strong>,vtbl会保存自己类中的虚函数地址！</p>
<p><em>示例一</em></p>
<pre><code class="language-c++">#include &quot;iostream&quot;
#include&quot;cmath&quot;
using namespace std;
const double PI=3.1415926;
class Point{
protected:
    double len,wid;
public:
    Point(double len,double wid){
        this-&gt;len=len;
        this-&gt;wid=wid;
    }
     double Area(){
        return 0.0;
    }
};
class Circle:public Point{
protected:
    double r;
public:
    Circle(double len,double wid,double r): Point(len,wid){
        this-&gt;r=r;
    }
    double Area(){
        return PI*pow(r,2);
    }
};
int main(){
    Point a(10,10);                            //创建Point类对象
    cout&lt;&lt;&quot;The Point Area is &quot;&lt;&lt;a.Area()&lt;&lt;endl;        //调用Area函数输出面积
    Circle c(10,10,10);                      //创建Circle类对象
    cout&lt;&lt;&quot;The Circle Area is &quot;&lt;&lt;c.Area()&lt;&lt;endl;      //调用派生类Area函数输出面积
    Point a2 = c;                                     //使用派生类对象初始化基类对象
    cout&lt;&lt;&quot;The a2 Area is &quot;&lt;&lt;a2.Area()&lt;&lt;endl;         //调用a2中Area函数
    Point *pt=&amp;c;                                     //创建指向派生类的基类指针
    cout&lt;&lt;&quot;The *pt Area is &quot;&lt;&lt;pt-&gt;Area()&lt;&lt;endl;       //调用指针中的Area函数
    Point &amp;a3=c;                                      //使用派生类初始化基类引用
    cout&lt;&lt;&quot;The a3 Area is &quot;&lt;&lt;a3.Area()&lt;&lt;endl;         //引用中的Area函数
    return 0;
}
</code></pre>
<p>此时，基类中的Area函数为成员函数，根据赋值兼容规则，仅对象C返回值。其余对象皆调用基类Area函数</p>
<p><img src="https://Mr-L-R-Y.github.io/post-images/1620916285008.png" alt="" loading="lazy"><br>
<em>实例2</em>：</p>
<pre><code class="language-c++">#include &quot;iostream&quot;
#include&quot;cmath&quot;
using namespace std;
const double PI=3.1415926;
class Point{
protected:
    double len,wid;
public:
    Point(double len,double wid){
        this-&gt;len=len;
        this-&gt;wid=wid;
    }
    virtual double Area(){
        return 0.0;
    }
};
class Circle:public Point{
protected:
    double r;
public:
    Circle(double len,double wid,double r): Point(len,wid){
        this-&gt;r=r;
    }
    double Area(){
        return PI*pow(r,2);
    }
};
int main(){
    Point a(10,10);                            //创建Point类对象
    cout&lt;&lt;&quot;The Point Area is &quot;&lt;&lt;a.Area()&lt;&lt;endl;        //调用Area函数输出面积
    Circle c(10,10,10);                      //创建Circle类对象
    cout&lt;&lt;&quot;The Circle Area is &quot;&lt;&lt;c.Area()&lt;&lt;endl;      //调用派生类Area函数输出面积
    Point a2 = c;                                     //使用派生类对象初始化基类对象
    cout&lt;&lt;&quot;The a2 Area is &quot;&lt;&lt;a2.Area()&lt;&lt;endl;         //调用a2中Area函数
    Point *pt=&amp;c;                                     //创建指向派生类的基类指针
    cout&lt;&lt;&quot;The *pt Area is &quot;&lt;&lt;pt-&gt;Area()&lt;&lt;endl;       //调用指针中的Area函数
    Point &amp;a3=c;                                      //使用派生类初始化基类引用
    cout&lt;&lt;&quot;The a3 Area is &quot;&lt;&lt;a3.Area()&lt;&lt;endl;         //引用中的Area函数
    return 0;
}
</code></pre>
<p>此时，基类中Area被声明为虚函数，此时输出结果中指针与引用皆调用派生类中的Area函数。</p>
<figure data-type="image" tabindex="1"><img src="https://Mr-L-R-Y.github.io/post-images/1620916294638.png" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[指令周期、机器周期、时钟周期之间的关系]]></title>
        <id>https://Mr-L-R-Y.github.io/post/zhi-ling-zhou-qi-ji-qi-zhou-qi-shi-zhong-zhou-qi-zhi-jian-de-guan-xi/</id>
        <link href="https://Mr-L-R-Y.github.io/post/zhi-ling-zhou-qi-ji-qi-zhou-qi-shi-zhong-zhou-qi-zhi-jian-de-guan-xi/">
        </link>
        <updated>2021-05-10T11:05:28.000Z</updated>
    </entry>
    <entry>
        <title type="html"><![CDATA[选择排序 ]]></title>
        <id>https://Mr-L-R-Y.github.io/post/guan-yu-xuan-ze-pai-xu/</id>
        <link href="https://Mr-L-R-Y.github.io/post/guan-yu-xuan-ze-pai-xu/">
        </link>
        <updated>2021-03-23T09:26:13.000Z</updated>
        <summary type="html"><![CDATA[<h3>算法原理</h3>
<font color="blue">
<ul>
<li>定义变量Min储存数组中最小值的下标</li>
<li>初始时，将数组第一个元素赋值给Min</li>
<li>Min赋值过后，定义变量 j 向后搜索 Min 后元素是否小于Min</li>
<li>若Min后元素小于Min，则 a[Min] 与 a[j] 交换位置</li>
</ul>
</font>
<img src="https://www.runoob.com/wp-content/uploads/2019/03/selectionSort.gif" alt="原理图片">
]]></summary>
        <content type="html"><![CDATA[<h3>算法原理</h3>
<font color="blue">
<ul>
<li>定义变量Min储存数组中最小值的下标</li>
<li>初始时，将数组第一个元素赋值给Min</li>
<li>Min赋值过后，定义变量 j 向后搜索 Min 后元素是否小于Min</li>
<li>若Min后元素小于Min，则 a[Min] 与 a[j] 交换位置</li>
</ul>
</font>
<img src="https://www.runoob.com/wp-content/uploads/2019/03/selectionSort.gif" alt="原理图片">
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[HTML基础（ 一 ）]]></title>
        <id>https://Mr-L-R-Y.github.io/post/html-ji-chu-yi/</id>
        <link href="https://Mr-L-R-Y.github.io/post/html-ji-chu-yi/">
        </link>
        <updated>2021-03-11T13:18:45.000Z</updated>
    </entry>
    <entry>
        <title type="html"><![CDATA[网页测试]]></title>
        <id>https://Mr-L-R-Y.github.io/post/wang-ye-ce-shi/</id>
        <link href="https://Mr-L-R-Y.github.io/post/wang-ye-ce-shi/">
        </link>
        <updated>2021-03-11T12:29:26.000Z</updated>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://Mr-L-R-Y.github.io/post/hello-gridea/</id>
        <link href="https://Mr-L-R-Y.github.io/post/hello-gridea/">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></content>
    </entry>
</feed>